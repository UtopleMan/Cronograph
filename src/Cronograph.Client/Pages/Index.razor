@using Cronograph.Shared;
@using System.Linq
@using System.Text.Json;

@page "/"
<div class="d-flex flex-row-reverse">
    <HxButtonGroup CssClass="float-end">
        <InputRadioGroup @bind-Value="PageSize">
            <InputRadio id="radio16" class="btn-check" Value="@(16)" />
            <label class="btn btn-outline-primary" for="radio16">16</label>
            <InputRadio id="radio32" class="btn-check" Value="@(32)" />
            <label class="btn btn-outline-primary" for="radio32">32</label>
            <InputRadio id="radio64" class="btn-check" Value="@(64)" />
            <label class="btn btn-outline-primary" for="radio64">64</label>
            <InputRadio id="radio128" class="btn-check" Value="@(128)" />
            <label class="btn btn-outline-primary" for="radio128">128</label>
            <InputRadio id="radio256" class="btn-check" Value="@(256)" />
            <label class="btn btn-outline-primary" for="radio256">256</label>
        </InputRadioGroup>
    </HxButtonGroup>
</div>
<HxGrid @ref="grid" TItem="Job" DataProvider="GetGridData" PageSize="@PageSize" Responsive="true" MultiSelectionEnabled="true" @bind-SelectedDataItems="selectedJobs">
    <Columns>
        <HxGridColumn>
            <ItemTemplate Context="job">
                <div style="width: 20px;max-width: 20px;">
                @if (job.State == JobStates.Running)
                {
                    <HxSpinner Size="SpinnerSize.Small" />
                }
                </div>
            </ItemTemplate>
        </HxGridColumn>
        <HxGridColumn ItemTextSelector="x => x.Name">
            <HeaderTemplate>
                <HxInputText @bind-Value="filter" BindEvent="BindEvent.OnInput" @bind-Value:after="grid.RefreshDataAsync" Placeholder="Filter.." 
                    InputSize="InputSize.Small" />
            </HeaderTemplate>
        </HxGridColumn>

        <HxGridColumn HeaderText="Cron" ItemTextSelector="x => RenderCron(x)" />
        <HxGridColumn HeaderText="Next Run" ItemTextSelector="@(x => RenderTimeDifference(x.NextJobRunTime))" />
        <HxGridColumn HeaderText="Next Run Time" ItemTextSelector="@(x => RenderTime(x.NextJobRunTime))" />
        <HxGridColumn HeaderText="Last State" ItemTextSelector="x => x.LastJobRunState.ToString()" />
        <HxGridColumn HeaderText="Last Run Time" ItemTextSelector="@(x => RenderTime(x.LastJobRunTime))" />
        <HxGridColumn HeaderText="Last Message" ItemTextSelector="x => x.LastJobRunMessage" />
        <HxGridColumn>
            <ItemTemplate Context="job">
                <div style="width: 150px;max-width: 150px;">
                    <HxButton Icon="BootstrapIcon.PlayCircle" Enabled="job.State != JobStates.Running" OnClick="async () => await Execute(job)" Color="ThemeColor.Primary" style="margin-right:5px" />
                    <HxButton Icon="BootstrapIcon.Calendar" Enabled="job.State == JobStates.Stopped" OnClick="async () => await Start(job)" Color="ThemeColor.Secondary" style="margin-right:5px" />
                    <HxButton Icon="BootstrapIcon.StopCircle" Enabled="job.State != JobStates.Stopped" OnClick="async () => await Stop(job)" Color="ThemeColor.Danger" />
                </div>
            </ItemTemplate>
        </HxGridColumn>
    </Columns>
</HxGrid>

<p>
    <HxButton Icon="BootstrapIcon.PlayCircle" Text="Run now" Enabled="selectedJobs.Any()" OnClick="async () => await Execute(selectedJobs)" Color="ThemeColor.Primary" />
    <HxButton Icon="BootstrapIcon.Calendar" Text="Schedule" Enabled="selectedJobs.Any()" OnClick="async () => await Start(selectedJobs)" Color="ThemeColor.Secondary" />
    <HxButton Icon="BootstrapIcon.StopCircle" Text="Stop" Enabled="selectedJobs.Any()" OnClick="async () => await Stop(selectedJobs)" Color="ThemeColor.Danger" />
</p>
@code {
    private Timer timer;
    private bool disposed = false;
    private string filter = "";
    private string time = "";
    private HxGrid<Job> grid;
    private HashSet<Job> selectedJobs = new();
    private int PageSize = 16;
    [Inject]
    HttpClient Http { get; set; }
    [Inject] 
    IHxMessageBoxService MessageBox { get; set; }
    [Inject] 
    IHxMessengerService Messenger { get; set; }

    string RenderCron(Job job)
    {
        if (job.TimingType == TimingTypes.Cron)
            return job.CronString;

        var result = "Every ";
        if (job.TimeSpan.Days > 0)
            result += job.TimeSpan.Days + "d ";
        if (job.TimeSpan.Hours > 0)
            result += job.TimeSpan.Hours + "h ";
        if (job.TimeSpan.Minutes > 0)
            result += job.TimeSpan.Minutes + "m ";
        if (job.TimeSpan.Seconds > 0)
            result += job.TimeSpan.Seconds + "s ";
        return result;
    }
    string RenderTime(DateTimeOffset time)
    {
        if (time == DateTimeOffset.MinValue)
            return "";
        return time.ToLocalTime().ToString("yyyy-MM-dd HH:mm:ss");
    }
    string RenderTimeDifference(DateTimeOffset time)
    {
        if (time == DateTimeOffset.MinValue)
            return "";
        var timeSpan = time - DateTimeOffset.UtcNow;
        if (timeSpan < TimeSpan.Zero)
            return $"Still running.. ({-timeSpan.Seconds}s)";

        if (timeSpan < TimeSpan.FromMinutes(1))
            return timeSpan.Seconds + "s";
        if (timeSpan < TimeSpan.FromHours(1))
            return timeSpan.Minutes + "m " + timeSpan.Seconds + "s";
        if (timeSpan < TimeSpan.FromDays(1))
            return timeSpan.Hours + "h " + timeSpan.Minutes + "m";
        return timeSpan.Days + "days";
    }
    private async Task OpenMessageBox()
    {
        var showResult = await MessageBox.ShowAsync("Info", "This is the text", MessageBoxButtons.OkCancel);
    }

    private async Task OpenConfirm()
    {
        var confirmResult = await MessageBox.ConfirmAsync("Confirm", "Do you really want to ...?");
    }
    void UpdateTime()
    {
        time = DateTime.UtcNow.ToLocalTime().ToString("yyyy-MM-dd HH:mm:ss");
        InvokeAsync(StateHasChanged);
    }
    void LocationChanged(object sender, LocationChangedEventArgs e)
    {
        timer.Dispose();

    }
    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            timer = new Timer(async state => { await InvokeAsync(UpdateView); }, null, 0, 1000);
        }
        return Task.CompletedTask;
    }
    private async Task UpdateView()
    {
        await grid.RefreshDataAsync();
        UpdateTime();
    }
    private async Task<GridDataProviderResult<Job>> GetGridData(GridDataProviderRequest<Job> request)
    {
        var list = await Http.GetFromJsonAsync<Job[]>("/cronograph/jobs");
        if (list != null && filter != null && filter.Length > 0)
            list = list.Where(x => x.Name.ToLower().Contains(filter.ToLower())).ToArray();
        return request.ApplyTo(list);
    }
    protected async Task Stop(Job job)
    {
        await Http.PostAsJsonAsync("/cronograph/jobs/stop", new JobName { Name = job.Name });
    }
    protected async Task Stop(HashSet<Job> jobs)
    {
        foreach (var job in jobs)
            await Http.PostAsJsonAsync("/cronograph/jobs/stop", new JobName { Name = job.Name });
    }
    protected async Task Start(Job job)
    {
        await Http.PostAsJsonAsync("/cronograph/jobs/start", new JobName { Name = job.Name });
    }
    protected async Task Start(HashSet<Job> jobs)
    {
        foreach (var job in jobs)
            await Http.PostAsJsonAsync("/cronograph/jobs/start", new JobName { Name = job.Name });
    }
    protected async Task Execute(Job job)
    {
        await Http.PostAsJsonAsync("/cronograph/jobs/execute", new JobName { Name = job.Name });
    }
    protected async Task Execute(HashSet<Job> jobs)
    {
        foreach (var job in jobs)
            await Http.PostAsJsonAsync("/cronograph/jobs/execute", new JobName { Name = job.Name });
    }
    public void Dispose() => Dispose(true);

    public void Dispose(bool disposing)
    {
        if (disposed) return;
        timer.Dispose();
        disposed = true;
    }
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    private void FilterChanged(ChangeEventArgs args)
    {
        filter = args.Value as string;
    }
}