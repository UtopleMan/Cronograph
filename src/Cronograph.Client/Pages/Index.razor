@using Cronograph.Shared;
@using System.Linq
@using System.Text.Json;

@inject HttpClient Http
@page "/"
<style>
    fluent-badge {
        --badge-fill-highlight: #ffd800;
        --badge-fill-lowlight: #333;
        --badge-color-highlight: #000;
        --badge-color-lowlight: #fff;
    }
</style>
<FluentToolbar id="toolbar-fluent-components-two" style="width:100%">
    <FluentTextField slot="start" @oninput="FilterChanged"></FluentTextField>
    <FluentCombobox slot="end" Appearance="Appearance.Filled" Items=@contexts @bind-Value="@selectedContext" style="margin-right: 5px;"></FluentCombobox>
    <FluentCombobox slot="end" Appearance="Appearance.Filled" Items=@namespaces @bind-Value="@namespaceName"></FluentCombobox>
 </FluentToolbar>

<FluentDataGrid id="grid" Items=@Rows GridTemplateColumns="85px 160px 8fr 130px 85px" RowsData=DisplayedRows ColumnDefinitions=Columns @ref=grid>
    <TemplateColumn Title="">
        @if (context.State == JobStates.Finished)
        {
            <FluentBadge Appearance="Appearance.Accent">
                Finished
            </FluentBadge>
        }
        else if (context.State == JobStates.Running)
        {
            <FluentProgressRing></FluentProgressRing>
        }
        else if (context.State == JobStates.Waiting)
        {
            <FluentBadge Fill="lowlight" Color="lowlight">
                Waiting
            </FluentBadge>
        }
        else if (context.State == JobStates.Stopped)
        {
            <FluentBadge Fill="highlight" Color="highlight">
                Stopped
            </FluentBadge>
        }
    </TemplateColumn>
    <TemplateColumn Title="Name">
        @context.Name
    </TemplateColumn>
    <TemplateColumn Title="Message">
        @context.LastJobRunMessage
    </TemplateColumn>
    <TemplateColumn Title="Time">
        @context.NextJobRunTime.ToLocalTime().ToString("yyyy-MM-dd HH:mm")
    </TemplateColumn>
    <TemplateColumn Title="Cron">
        @if (context.State == JobStates.Stopped)
        {
            <FluentButton @onclick="() => Start(context.Name)">Start</FluentButton>
        }
        else if (context.State != JobStates.Running)
        {
            <FluentButton @onclick="() => Stop(context.Name)">Pause</FluentButton>
        }
    </TemplateColumn>
</FluentDataGrid>

@code {
    private FluentDataGrid<Job> grid;
    private List<Option<string>> contexts = new();
    private IQueryable<Job> Rows;
    private List<Option<string>> namespaces = new();
    private Timer timer;
    private string namespaceName = "flux-system";
    private string selectedContext = "";
    private bool disposed = false;
    private string filter = "";

    void LocationChanged(object sender, LocationChangedEventArgs e)
    {
        timer.Dispose();
    }
    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            timer = new Timer(async state => { await InvokeAsync(UpdateView); }, null, 0, 1000);
        }
        return Task.CompletedTask;
    }
    private async Task UpdateView()
    {
        var newRows = await GetJobs();
        var changedRows = new List<Job>();
        foreach (var row in newRows)
            if (!Rows.Any(x => x == row))
                changedRows.Add(row);

        if (!changedRows.Any()) return;
        StateHasChanged();
    }
    protected async Task<List<Job>> GetJobs()
    {
        Console.WriteLine("Hej");

        var list = await Http.GetFromJsonAsync<Job[]>("/cronograph/jobs");
        foreach (var job in list)
            Console.WriteLine(job);
        return list.ToList() ?? new();
    }
    protected async Task Stop(string name)
    {
        await Http.PostAsJsonAsync("/cronograph/jobs/stop", new { Name = name });
    }
    protected async Task Pause(string name)
    {
        await Http.PostAsJsonAsync("/cronograph/jobs/pause", new { Name = name });
    }
    protected async Task Start(string name)
    {
        await Http.PostAsJsonAsync("/cronograph/jobs/start", new { Name = name });
    }
    public void Dispose() => Dispose(true);

    public void Dispose(bool disposing)
    {
        if (disposed) return;
        timer.Dispose();
        disposed = true;
    }
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Rows = (await GetJobs()).AsQueryable();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    private void FilterChanged(ChangeEventArgs args)
    {
        filter = args.Value as string;
    }
}